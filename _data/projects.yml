# Projects
# uncomment the urls if you wish to display them, and add your own URL

# plantodo
- project: plantodo
  role: 백엔드 개발 (개인 프로젝트)
  duration: 2023.06 - 2023.08
  url: "https://github.com/yeonleaf/plantodo-renew"
  description: >
    일정과 할일을 관리하는 투두리스트 API
    <br>
    <br>
    <div>
      <b>기술</b>
      <ul>
        <li>
          Java, Spring Boot, Spring Data JPA, QueryDSL, MySQL, Swagger-UI, flyway, EC2, Github Actions, Docker compose
        </li>
      </ul>
    </div>
    <div>
      <b>설명</b>
      <ul class="resume-item-list">
        <li>
          Spring HATEOAS의 RepresentationModelAssembler를 사용해 단일 Domain를 사용하는 API에 관련 URI로 이동할 수 있는 하이퍼미디어 링크를 제공하고 조금 더 RESTful하게 만듦
        </li>
        <br>
        <li>
          JWT 토큰 방식의 인증을 사용해 기존 로직에서 쿠키 기반 인증을 사용했을 때 발생했던 문제들을 보완
        </li>
        <br>
        <li>
          <a href="https://erratic-leo-4a8.notion.site/Docker-Docker-Compose-Github-Actions-b9529abf903646fc810fe0c0185fbabe?pvs=4" target="_blank">Github Actions를 사용해 Gradle 테스트 - Docker image 빌드 & 푸시 - EC2에서 Docker image pull 하는 과정을 자동화해 배포까지 걸리는 시간을 단축</a>
        </li>
      </ul>
    </div>
    <br>
    <div>
      <b>프로젝트를 진행하며 고민한 부분</b>
      <ul class="resume-item-list">
        <li>
          <b>직렬화/역직렬화 과정에 타입 컨버터를 사용</b>해 JPA가 @ElementCollection 값 타입 컬렉션을 관리하지 않아서 수정할 때 컬렉션에 있는 모든 값을 삭제하고 다시 등록해야 하는 단점을 해결
          <ul class="resume-item-list">
            <li>
              값 타입 컬렉션을 0과 1로 구성된 비트 문자열로 변환
            </li>
            <li>
              요청이 들어왔을 때는 <a href="https://github.com/yeonleaf/plantodo-renew/tree/714320783900ac3afe26aa78ebf99abb4506c224/plantodo/src/main/java/yeonleaf/plantodo/converter" target="_blank">전용 Converter</a>를 사용해서 리스트로 변환 후 리턴
            </li>
          </ul>
        </li>
        <br>
        <li>
          TDD를 프로젝트에 적용하면서 <b>서비스 레이어의 아키텍쳐 설계에 대해 고민</b>함. 그 결과 통합 테스트에 대한 의존도를 낮추고 전체 테스트 속도를 30sec -> 9sec으로 줄임
          <ul class="resume-item-list">
            <li>
              서비스를 DB 리포지토리를 사용하는 실제 구현체와 메모리 대역 리포지토리를 사용하는 테스트용 구현체로 분리
            </li>
            <li>
              서비스에 인터페이스를 사용해 테스트 서비스의 로직을 실제 서비스에 수정 없이 그대로 적용해도 되도록 형식을 맞춤
            </li>
            <li>
              테스트 서비스와 실제 서비스가 서로 다른 리포지토리 구현체를 사용하는 경우를 해결하기 위해 어댑터 패턴을 리포지토리에 적용
            </li>
          </ul>
        </li>
      </ul>
    </div>

- project: endaily
  role: 프론트엔드 개발, 백엔드 개발 (개인 프로젝트)
  duration: 2021.07 - 2021.09
  url: https://github.com/yeonleaf/EnDaily
  description: >
    수집한 영어 문장의 표현을 정리하고 스스로 문장을 재구성할 수 있는 영어 공부 웹 어플리케이션
    <br>
    <br>
    <div>
      <b>기술</b>
      <ul class="resume-item-list">
        <li>
          Frontend: React.js (library: Axios, React Router, React Hook)
        </li>
        <li>
          Backend: Java, Spring Boot, JPA(hibernate), H2
        </li>
      </ul>
    </div>
    <div>
      <b>설명</b>
      <ul class="resume-item-list">
        <li>
          설계상 사용자와의 상호작용이 많아 프론트엔드 라이브러리의 필요성을 느꼈고 컴포넌트 기반으로 설계할 수 있는 React.js를 사용
          <ul class="resume-item-list">
            <li>
              각각의 도메인을 중심으로 함수형 컴포넌트를 구성하고 그 안에서도 조회 전용 컴포넌트와 등록/수정/삭제 컴포넌트로 나눠 모듈화
            </li>
          </ul>
        </li>
        <li>
          WebClient를 사용해 외부 서버(Free dictionary API)에 검색 요청을 보낼 수 있는 API를 제공
        </li>
      </ul>
    </div>
    <div>
      <b>프로젝트를 진행하며 고민한 부분</b>
      <ul class="resume-item-list">
        <li>
          사용자가 최대한 페이지 refresh 없이 어플리케이션을 사용하는 것을 목표로 함
          <ul class="resume-item-list">
            <li>
              꼭 필요할 때만 React Router를 사용해 페이지를 이동. 사용자와의 상호작용이 많은 문장 - 표현 로직은 최대한 SPA처럼 구현해 refresh를 최소화
            </li>
            <li>
              문장과 여러 개의 표현을 같은 페이지에서 한 번의 요청으로 등록하기 위해 임시 저장 기능을 도입
              <ul class="resume-item-list">
                <li>
                  문장 등록 컴포넌트에 표현을 임시로 저장하는 배열을 두고 표현 등록 컴포넌트에 배열의 add 메소드를 props로 넘김
                </li>
                <li>
                  표현 등록 컴포넌트에서 props.add 호출이 발생하면 표현을 배열에 넣고 상태를 등록 가능 상태로 변경
                </li>
                <li>
                  한 번이라도 임시 저장을 해야만 실제 등록이 가능하며 실제 등록 버튼을 클릭하면 문장과 지금까지 누적한 표현을 서버에 등록 요청을 보냄
                </li>
              </ul>
            </li>
          </ul>
        </li>
        
      </ul>
    </div>


- project: portfolio_analysis
  role: 수집, 전처리, 분석, 시각화 (개인 프로젝트)
  duration: 2020.07 - 2020.07
  url: "https://github.com/yeonleaf/portfolio_analysis"
  description: >
    두 기업의 주가 데이터를 바탕으로 최적의 포트폴리오 비중을 찾는 R 스크립트<br><br>
    청년취업아카데미 데이터 시각화 과정에서 진행<br>
    <a href="https://github.com/yeonleaf/portfolio_analysis/blob/30091767c14e72dba5b492476e6a9eb18973158c/R_Project_JOJUYEON.pdf">진행 과정을 정리한 PPT 링크(Github)</a>
    <br>
    <br>
    <div>
      <b>목적</b>
      <ul>
        <li>
          주식 포트폴리오 분석 과정을 웹 형태로 구현해 유저가 분석 과정을 몰라도 쉽게 사용할 수 있도록 함
        </li>
      </ul>
    </div>
    <div>
      <b>기술</b>
      <ul>
        <li>
          R (library : quantmod, ggplot2, shiny)
        </li>
      </ul>
    </div>
    <div>
      <b>설명</b>
      <ul class="resume-item-list">
        <li>
          <b>데이터</b> : KRX의 종목코드, 금융 데이터 분석 패키지 quantmod의 주가 데이터 (주식 1, 주식 2, 국채)
        </li>
        <li>
          <b>전처리</b> : 데이터를 전처리해서 두 주식의 일별 수익률, Return(일별 수익률의 평균), Risk(일별 수익률의 표준편차), 두 주식의 상관계수 도출
        </li>
        <li>
          <b>분석</b> : 도출한 데이터를 바탕으로 Efficient Frontier와 CAL을 그리고 두 그래프가 만나는 tangent weight(두 주식이 차지하는 비중)을 구함
        </li>
        <li>
          <b>시각화</b> : ggplotly, 시각화 라이브러리 shiny를 사용해 두 기업을 선택할 수 있는 유저 인터페이스를 제공하고 결과로 도출한 그래프와 테이블을 시각화 
        </li>
      </ul>
    </div>
    
- project: momentum
  role: 백엔드 개발 (동아리 팀 프로젝트 - 2인)
  duration: 2019.11 - 2019.11
  url: "https://github.com/yeonleaf/momentum"
  description: >
    크롬 익스텐션 Momentum의 기능의 일부를 구현한 클론 프로젝트
    <br>
    <br>
    <div>
      <b>기술</b>
      <ul>
        <li>
          HTML, CSS, Javascript, Jquery, MySQL, PHP, XAMPP
        </li>
      </ul>
    </div>
    <div>
      <b>설명</b>
      <ul class="resume-item-list">
        <li>
          로컬 개발 환경을 쉽게 구성하기 위해 XAMPP를 사용해 Apache, MySQL을 세팅하는 과정에서 발생한 다양한 연결 오류를 해결
        </li>
        <li>
          할 일 등록, 삭제 시 php action을 비동기 처리해 refresh가 발생하지 않게 하는 데 중점을 둠
        </li>
      </ul>
    </div>