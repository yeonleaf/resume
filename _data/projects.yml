# Projects
# uncomment the urls if you wish to display them, and add your own URL

# plantodo
- project: plantodo
  role: 백엔드 개발 (개인 프로젝트)
  duration: 2023.06 - 2023.08
  url: "https://github.com/yeonleaf/plantodo-renew"
  description: >
    일정과 할일을 관리하는 투두리스트 API
    <br>
    <br>
    <div>
      <b>사용 기술</b>
      <ul>
        <li>
          Java, Spring, Spring Data JPA, QueryDSL, MySQL, Swagger-UI, flyway, EC2, <br> Github Actions, Docker compose
        </li>
      </ul>
    </div>
    <div>
      <b>설명</b>
      <ul class="resume-item-list">
        <li>
          Spring HATEOAS의 RepresentationModelAssembler를 사용해 단일 Domain를 사용하는 API에 관련 URI로 이동할 수 있는 하이퍼미디어 링크를 제공하고 조금 더 RESTful하게 만듦
        </li>
        <br>
        <li>
          JWT 토큰 방식의 인증을 사용해 기존 로직에서 쿠키 기반 인증을 사용했을 때 발생했던 문제들을 보완
        </li>
        <br>
        <li>
          <a href="https://erratic-leo-4a8.notion.site/Docker-Docker-Compose-Github-Actions-b9529abf903646fc810fe0c0185fbabe?pvs=4" target="_blank">Github Actions를 사용해 Gradle 테스트 - Docker image 빌드 & 푸시 - EC2에서 Docker image pull 하는 과정을 자동화해 배포까지 걸리는 시간을 단축</a>
        </li>
      </ul>
    </div>
    <br>
    <div>
      <b>프로젝트를 진행하며 고민한 부분</b>
      <ul class="resume-item-list">
        <li>
          JPA가 @ElementCollection 값 타입 컬렉션을 관리하지 않아서 수정할 때 컬렉션에 있는 모든 값을 삭제하고 다시 등록해야 하는 단점을 해결
          <ul class="resume-item-list">
            <li>
              값 타입 컬렉션을 0과 1로 구성된 비트 문자열로 변환
            </li>
            <li>
              요청이 들어왔을 때는 <a href="https://github.com/yeonleaf/plantodo-renew/tree/714320783900ac3afe26aa78ebf99abb4506c224/plantodo/src/main/java/yeonleaf/plantodo/converter" target="_blank">전용 Converter</a>를 사용해서 리스트로 변환 후 리턴
            </li>
          </ul>
        </li>
        <br>
        <li>
          TDD를 프로젝트에 적용하면서 서비스 레이어의 아키텍쳐 설계에 대해 고민함. 그 결과 통합 테스트에 대한 의존도를 낮추고 전체 테스트 속도를 30sec -> 9sec으로 줄임
          <ul class="resume-item-list">
            <li>
              서비스를 DB 리포지토리를 사용하는 실제 구현체와 메모리 대역 리포지토리를 사용하는 테스트용 구현체로 분리
            </li>
            <li>
              서비스에 인터페이스를 사용해 테스트 서비스의 로직을 실제 서비스에 수정 없이 그대로 적용해도 되도록 형식을 맞춤
            </li>
            <li>
              테스트 서비스와 실제 서비스가 서로 다른 리포지토리 구현체를 사용하는 경우를 해결하기 위해 어댑터 패턴을 리포지토리에 적용
            </li>
          </ul>
        </li>
      </ul>
    </div>